name: Deploy Documentation

on:
  push:
    branches:
      - main
    paths:
      - 'docs/**'
      - 'website/**'
      - 'dist/chart/Chart.yaml'
  workflow_dispatch:
  workflow_run:
    workflows: ["Release Chart"]
    types:
      - completed

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  extract-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract version from Chart.yaml
        id: extract
        run: |
          if [ ! -f "dist/chart/Chart.yaml" ]; then
            echo "Error: Chart.yaml not found at dist/chart/Chart.yaml"
            exit 1
          fi
          
          VERSION=$(grep '^version:' dist/chart/Chart.yaml | awk '{print $2}' | tr -d '"' | tr -d "'")
          
          if [ -z "$VERSION" ]; then
            echo "Error: Could not extract version from Chart.yaml"
            exit 1
          fi
          
          echo "Extracted version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Validate version format
        run: |
          VERSION="${{ steps.extract.outputs.version }}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
            echo "Warning: Version '$VERSION' does not follow semantic versioning format"
          fi

  build:
    runs-on: ubuntu-latest
    needs: extract-version
    env:
      CHART_VERSION: ${{ needs.extract-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: website/package.json

      - name: Install dependencies
        working-directory: website
        run: npm ci

      - name: Update Docusaurus config with extracted version
        working-directory: website
        run: |
          echo "Updating Docusaurus config with version: v${{ env.CHART_VERSION }}"
          
          # Create a temporary config file with the updated version
          node -e "
            const fs = require('fs');
            const path = require('path');
            const configPath = path.join(__dirname, 'docusaurus.config.js');
            let config = fs.readFileSync(configPath, 'utf8');
            
            // Replace the version in the versions configuration
            config = config.replace(
              /label: 'v[^']*'/,
              \`label: 'v${{ env.CHART_VERSION }}'\`
            );
            
            // Also update package.json version for consistency
            const packagePath = path.join(__dirname, 'package.json');
            const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
            packageJson.version = '${{ env.CHART_VERSION }}';
            fs.writeFileSync(packagePath, JSON.stringify(packageJson, null, 2));
            
            fs.writeFileSync(configPath, config);
            console.log('Updated Docusaurus config and package.json with version v${{ env.CHART_VERSION }}');
          "

      - name: Build Docusaurus site
        working-directory: website
        run: |
          echo "Building Docusaurus site with version v${{ env.CHART_VERSION }}"
          npm run build
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-pages-artifact@v3
        with:
          path: website/build

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [extract-version, build]
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Log deployment success
        run: |
          echo "‚úÖ Documentation successfully deployed!"
          echo "üìñ Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "üè∑Ô∏è  Version: v${{ needs.extract-version.outputs.version }}"
          echo "üïê Deployed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"

  notify-completion:
    runs-on: ubuntu-latest
    needs: [extract-version, deploy]
    if: always()
    steps:
      - name: Report deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "üéâ Documentation deployment completed successfully!"
            echo "Version v${{ needs.extract-version.outputs.version }} is now live."
          else
            echo "‚ùå Documentation deployment failed."
            echo "Please check the logs for details."
            exit 1
          fi